apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.kotlin.android.extensions'

int MAJOR_VERSION = 1
int MINOR_VERSION = 0
int MICRO_VERSION = 3
int BUILD_FOR_TODAY = 1

def secretsPropertiesFile = rootProject.file("secrets.properties")
def secretsProperties = new Properties()
secretsProperties.load(new FileInputStream(secretsPropertiesFile))

androidExtensions {
    experimental = true
}

def getWhatsNew = { ->
    def text = file('../CHANGELOG.md').text
    def start = text.indexOf(")") + 1
    def end = text.indexOf("###", 3)
    text = text
            .substring(start, end)
            .trim()
    println "--- What's new ---"
    println text
    println "------------------"
    text = text
            .replace("\r", "")
            .replace("\n", "\\n")
    return text
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.myetherwallet.mewconnect"
        minSdkVersion 23
        targetSdkVersion 28
        versionName String.format("%d.%d.%d", MAJOR_VERSION, MINOR_VERSION, MICRO_VERSION)
        def date = new Date()
        versionCode Integer.valueOf(String.format("%ty%tm%td%02d", date, date, date, BUILD_FOR_TODAY))
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        buildConfigField "String", "CONNECT_API_END_POINT", "\"https://connect.mewapi.io\""
        buildConfigField "String", "MEW_API_END_POINT", "\"https://api.myetherwallet.com/\""
        buildConfigField "String", "APICCSWAP_API_END_POINT", "\"https://apiccswap.myetherwallet.com/\""
        buildConfigField "String", "APICCSWAP_API_KEY", "\"" + secretsProperties['apiccswapApiKey'] + "\""
        buildConfigField "String", "APICCSWAP_REFERER", "\"" + secretsProperties['apiccswapReferer'] + "\""
        buildConfigField "String", "RATES_API_END_POINT", "\"https://cryptorates.mewapi.io/\""

        resValue "string", "whats_new", getWhatsNew()
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.27.0-eap13'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:0.27.0-eap13'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    api 'com.android.support:design:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.github.alexjlockwood:kyrie:0.1.3'
    implementation 'com.google.firebase:firebase-ml-vision:19.0.2'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    kapt "android.arch.lifecycle:compiler:1.1.1"
    kapt "com.google.dagger:dagger-compiler:2.13"
    implementation 'com.google.dagger:dagger:2.13'
    implementation 'javax.annotation:jsr250-api:1.0'
    implementation 'javax.inject:javax.inject:1'
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    kapt 'android.arch.persistence.room:compiler:1.1.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.0'
    implementation 'com.nulab-inc:zxcvbn:1.2.5'
    implementation 'com.github.kenglxn.QRGen:android:2.5.0'
    implementation('io.socket:socket.io-client:1.0.0') {
        // excluding org.json which is provided by Android
        exclude group: 'org.json', module: 'json'
    }
    implementation 'com.madgag.spongycastle:prov:1.58.0.0'

    implementation 'org.web3j:core:4.2.0-android'

    implementation 'org.bitcoinj:bitcoinj-core:0.14.7'
    implementation 'org.webrtc:google-webrtc:1.0.24064'
    implementation 'com.github.gnosis.svalinn-kotlin:blockies:v0.5.4'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

